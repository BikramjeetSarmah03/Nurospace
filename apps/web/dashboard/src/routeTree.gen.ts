/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './pages/__root'
import { Route as AuthLayoutRouteImport } from './pages/auth/layout'
import { Route as ProtectedLayoutRouteImport } from './pages/_protected/layout'
import { Route as ProtectedIndexRouteImport } from './pages/_protected/index'
import { Route as AuthRegisterIndexRouteImport } from './pages/auth/register/index'
import { Route as AuthLoginIndexRouteImport } from './pages/auth/login/index'
import { Route as ProtectedWIndexRouteImport } from './pages/_protected/w/index'
import { Route as ProtectedResourceIndexRouteImport } from './pages/_protected/resource/index'
import { Route as AuthPasswordForgotRouteImport } from './pages/auth/password/forgot'
import { Route as ProtectedCNewRouteImport } from './pages/_protected/c/new'
import { Route as ProtectedCSlugRouteImport } from './pages/_protected/c/$slug'
import { Route as ProtectedWWorkflowIdIndexRouteImport } from './pages/_protected/w/$workflowId/index'
import { Route as ProtectedWWorkflowIdRunsExecutionIdRouteImport } from './pages/_protected/w/$workflowId/runs/$executionId'

const ProtectedWWorkflowIdEditorIndexLazyRouteImport = createFileRoute(
  '/_protected/w/$workflowId/editor/',
)()

const AuthLayoutRoute = AuthLayoutRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedLayoutRoute = ProtectedLayoutRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedIndexRoute = ProtectedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedLayoutRoute,
} as any)
const AuthRegisterIndexRoute = AuthRegisterIndexRouteImport.update({
  id: '/register/',
  path: '/register/',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const AuthLoginIndexRoute = AuthLoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const ProtectedWIndexRoute = ProtectedWIndexRouteImport.update({
  id: '/w/',
  path: '/w/',
  getParentRoute: () => ProtectedLayoutRoute,
} as any)
const ProtectedResourceIndexRoute = ProtectedResourceIndexRouteImport.update({
  id: '/resource/',
  path: '/resource/',
  getParentRoute: () => ProtectedLayoutRoute,
} as any)
const AuthPasswordForgotRoute = AuthPasswordForgotRouteImport.update({
  id: '/password/forgot',
  path: '/password/forgot',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const ProtectedCNewRoute = ProtectedCNewRouteImport.update({
  id: '/c/new',
  path: '/c/new',
  getParentRoute: () => ProtectedLayoutRoute,
} as any)
const ProtectedCSlugRoute = ProtectedCSlugRouteImport.update({
  id: '/c/$slug',
  path: '/c/$slug',
  getParentRoute: () => ProtectedLayoutRoute,
} as any)
const ProtectedWWorkflowIdIndexRoute =
  ProtectedWWorkflowIdIndexRouteImport.update({
    id: '/w/$workflowId/',
    path: '/w/$workflowId/',
    getParentRoute: () => ProtectedLayoutRoute,
  } as any)
const ProtectedWWorkflowIdEditorIndexLazyRoute =
  ProtectedWWorkflowIdEditorIndexLazyRouteImport.update({
    id: '/w/$workflowId/editor/',
    path: '/w/$workflowId/editor/',
    getParentRoute: () => ProtectedLayoutRoute,
  } as any).lazy(() =>
    import('./pages/_protected/w/$workflowId/editor/index.lazy').then(
      (d) => d.Route,
    ),
  )
const ProtectedWWorkflowIdRunsExecutionIdRoute =
  ProtectedWWorkflowIdRunsExecutionIdRouteImport.update({
    id: '/w/$workflowId/runs/$executionId',
    path: '/w/$workflowId/runs/$executionId',
    getParentRoute: () => ProtectedLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/auth': typeof AuthLayoutRouteWithChildren
  '/': typeof ProtectedIndexRoute
  '/c/$slug': typeof ProtectedCSlugRoute
  '/c/new': typeof ProtectedCNewRoute
  '/auth/password/forgot': typeof AuthPasswordForgotRoute
  '/resource': typeof ProtectedResourceIndexRoute
  '/w': typeof ProtectedWIndexRoute
  '/auth/login': typeof AuthLoginIndexRoute
  '/auth/register': typeof AuthRegisterIndexRoute
  '/w/$workflowId': typeof ProtectedWWorkflowIdIndexRoute
  '/w/$workflowId/runs/$executionId': typeof ProtectedWWorkflowIdRunsExecutionIdRoute
  '/w/$workflowId/editor': typeof ProtectedWWorkflowIdEditorIndexLazyRoute
}
export interface FileRoutesByTo {
  '/auth': typeof AuthLayoutRouteWithChildren
  '/': typeof ProtectedIndexRoute
  '/c/$slug': typeof ProtectedCSlugRoute
  '/c/new': typeof ProtectedCNewRoute
  '/auth/password/forgot': typeof AuthPasswordForgotRoute
  '/resource': typeof ProtectedResourceIndexRoute
  '/w': typeof ProtectedWIndexRoute
  '/auth/login': typeof AuthLoginIndexRoute
  '/auth/register': typeof AuthRegisterIndexRoute
  '/w/$workflowId': typeof ProtectedWWorkflowIdIndexRoute
  '/w/$workflowId/runs/$executionId': typeof ProtectedWWorkflowIdRunsExecutionIdRoute
  '/w/$workflowId/editor': typeof ProtectedWWorkflowIdEditorIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_protected': typeof ProtectedLayoutRouteWithChildren
  '/auth': typeof AuthLayoutRouteWithChildren
  '/_protected/': typeof ProtectedIndexRoute
  '/_protected/c/$slug': typeof ProtectedCSlugRoute
  '/_protected/c/new': typeof ProtectedCNewRoute
  '/auth/password/forgot': typeof AuthPasswordForgotRoute
  '/_protected/resource/': typeof ProtectedResourceIndexRoute
  '/_protected/w/': typeof ProtectedWIndexRoute
  '/auth/login/': typeof AuthLoginIndexRoute
  '/auth/register/': typeof AuthRegisterIndexRoute
  '/_protected/w/$workflowId/': typeof ProtectedWWorkflowIdIndexRoute
  '/_protected/w/$workflowId/runs/$executionId': typeof ProtectedWWorkflowIdRunsExecutionIdRoute
  '/_protected/w/$workflowId/editor/': typeof ProtectedWWorkflowIdEditorIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/auth'
    | '/'
    | '/c/$slug'
    | '/c/new'
    | '/auth/password/forgot'
    | '/resource'
    | '/w'
    | '/auth/login'
    | '/auth/register'
    | '/w/$workflowId'
    | '/w/$workflowId/runs/$executionId'
    | '/w/$workflowId/editor'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth'
    | '/'
    | '/c/$slug'
    | '/c/new'
    | '/auth/password/forgot'
    | '/resource'
    | '/w'
    | '/auth/login'
    | '/auth/register'
    | '/w/$workflowId'
    | '/w/$workflowId/runs/$executionId'
    | '/w/$workflowId/editor'
  id:
    | '__root__'
    | '/_protected'
    | '/auth'
    | '/_protected/'
    | '/_protected/c/$slug'
    | '/_protected/c/new'
    | '/auth/password/forgot'
    | '/_protected/resource/'
    | '/_protected/w/'
    | '/auth/login/'
    | '/auth/register/'
    | '/_protected/w/$workflowId/'
    | '/_protected/w/$workflowId/runs/$executionId'
    | '/_protected/w/$workflowId/editor/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ProtectedLayoutRoute: typeof ProtectedLayoutRouteWithChildren
  AuthLayoutRoute: typeof AuthLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexRouteImport
      parentRoute: typeof ProtectedLayoutRoute
    }
    '/auth/register/': {
      id: '/auth/register/'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterIndexRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/auth/login/': {
      id: '/auth/login/'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginIndexRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/_protected/w/': {
      id: '/_protected/w/'
      path: '/w'
      fullPath: '/w'
      preLoaderRoute: typeof ProtectedWIndexRouteImport
      parentRoute: typeof ProtectedLayoutRoute
    }
    '/_protected/resource/': {
      id: '/_protected/resource/'
      path: '/resource'
      fullPath: '/resource'
      preLoaderRoute: typeof ProtectedResourceIndexRouteImport
      parentRoute: typeof ProtectedLayoutRoute
    }
    '/auth/password/forgot': {
      id: '/auth/password/forgot'
      path: '/password/forgot'
      fullPath: '/auth/password/forgot'
      preLoaderRoute: typeof AuthPasswordForgotRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/_protected/c/new': {
      id: '/_protected/c/new'
      path: '/c/new'
      fullPath: '/c/new'
      preLoaderRoute: typeof ProtectedCNewRouteImport
      parentRoute: typeof ProtectedLayoutRoute
    }
    '/_protected/c/$slug': {
      id: '/_protected/c/$slug'
      path: '/c/$slug'
      fullPath: '/c/$slug'
      preLoaderRoute: typeof ProtectedCSlugRouteImport
      parentRoute: typeof ProtectedLayoutRoute
    }
    '/_protected/w/$workflowId/': {
      id: '/_protected/w/$workflowId/'
      path: '/w/$workflowId'
      fullPath: '/w/$workflowId'
      preLoaderRoute: typeof ProtectedWWorkflowIdIndexRouteImport
      parentRoute: typeof ProtectedLayoutRoute
    }
    '/_protected/w/$workflowId/editor/': {
      id: '/_protected/w/$workflowId/editor/'
      path: '/w/$workflowId/editor'
      fullPath: '/w/$workflowId/editor'
      preLoaderRoute: typeof ProtectedWWorkflowIdEditorIndexLazyRouteImport
      parentRoute: typeof ProtectedLayoutRoute
    }
    '/_protected/w/$workflowId/runs/$executionId': {
      id: '/_protected/w/$workflowId/runs/$executionId'
      path: '/w/$workflowId/runs/$executionId'
      fullPath: '/w/$workflowId/runs/$executionId'
      preLoaderRoute: typeof ProtectedWWorkflowIdRunsExecutionIdRouteImport
      parentRoute: typeof ProtectedLayoutRoute
    }
  }
}

interface ProtectedLayoutRouteChildren {
  ProtectedIndexRoute: typeof ProtectedIndexRoute
  ProtectedCSlugRoute: typeof ProtectedCSlugRoute
  ProtectedCNewRoute: typeof ProtectedCNewRoute
  ProtectedResourceIndexRoute: typeof ProtectedResourceIndexRoute
  ProtectedWIndexRoute: typeof ProtectedWIndexRoute
  ProtectedWWorkflowIdIndexRoute: typeof ProtectedWWorkflowIdIndexRoute
  ProtectedWWorkflowIdRunsExecutionIdRoute: typeof ProtectedWWorkflowIdRunsExecutionIdRoute
  ProtectedWWorkflowIdEditorIndexLazyRoute: typeof ProtectedWWorkflowIdEditorIndexLazyRoute
}

const ProtectedLayoutRouteChildren: ProtectedLayoutRouteChildren = {
  ProtectedIndexRoute: ProtectedIndexRoute,
  ProtectedCSlugRoute: ProtectedCSlugRoute,
  ProtectedCNewRoute: ProtectedCNewRoute,
  ProtectedResourceIndexRoute: ProtectedResourceIndexRoute,
  ProtectedWIndexRoute: ProtectedWIndexRoute,
  ProtectedWWorkflowIdIndexRoute: ProtectedWWorkflowIdIndexRoute,
  ProtectedWWorkflowIdRunsExecutionIdRoute:
    ProtectedWWorkflowIdRunsExecutionIdRoute,
  ProtectedWWorkflowIdEditorIndexLazyRoute:
    ProtectedWWorkflowIdEditorIndexLazyRoute,
}

const ProtectedLayoutRouteWithChildren = ProtectedLayoutRoute._addFileChildren(
  ProtectedLayoutRouteChildren,
)

interface AuthLayoutRouteChildren {
  AuthPasswordForgotRoute: typeof AuthPasswordForgotRoute
  AuthLoginIndexRoute: typeof AuthLoginIndexRoute
  AuthRegisterIndexRoute: typeof AuthRegisterIndexRoute
}

const AuthLayoutRouteChildren: AuthLayoutRouteChildren = {
  AuthPasswordForgotRoute: AuthPasswordForgotRoute,
  AuthLoginIndexRoute: AuthLoginIndexRoute,
  AuthRegisterIndexRoute: AuthRegisterIndexRoute,
}

const AuthLayoutRouteWithChildren = AuthLayoutRoute._addFileChildren(
  AuthLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  ProtectedLayoutRoute: ProtectedLayoutRouteWithChildren,
  AuthLayoutRoute: AuthLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
