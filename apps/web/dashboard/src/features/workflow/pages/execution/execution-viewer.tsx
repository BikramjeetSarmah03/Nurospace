import { useQuery } from "@tanstack/react-query";

import {
  IWorkflowExecutionStatus,
  type IWorkflowExecution,
} from "@packages/workflow/types/workflow.js";

import { WORKFLOW_KEYS } from "../../lib/query-keys";
import { workflowService } from "../../services/workflow.service";

import ExecutionSidebar from "./_components/execution-sidebar";
import { useState } from "react";
import { Badge } from "@/components/ui/badge";
import { ClockIcon, CoinsIcon } from "lucide-react";
import { Input } from "@/components/ui/input";

interface ExecutionViewerProps {
  execution: IWorkflowExecution;
}

export default function ExecutionViewer({ execution }: ExecutionViewerProps) {
  const [selectedPhase, setSelectedPhase] = useState<string | null>(null);

  const query = useQuery({
    queryKey: [WORKFLOW_KEYS.EXECUTION, execution.id],
    queryFn: async () => {
      return await workflowService.getExecutionDetailsWithPhases(execution.id);
    },
    initialData: execution,
    refetchInterval: (q) =>
      q.state.data?.status === IWorkflowExecutionStatus.RUNNING ? 1000 : false,
  });

  const phaseDetails = useQuery({
    queryKey: [WORKFLOW_KEYS.PHASE_DETAILS, selectedPhase],
    enabled: !!selectedPhase,
    queryFn: () => workflowService.getPhaseDetails(selectedPhase ?? ""),
  });

  return (
    <div className="flex size-full">
      <ExecutionSidebar
        query={query.data}
        selectedPhase={selectedPhase}
        setSelectedPhase={setSelectedPhase}
      />

      <div className="flex-1 space-y-4 p-4 px-8">
        <div className="flex items-center gap-4">
          <Badge variant={"outline"} className="bg-background">
            <CoinsIcon />
            Credits 1
          </Badge>

          <Badge variant={"outline"} className="bg-background">
            <ClockIcon />
            Duration 700ms
          </Badge>
        </div>

        {/* Inputs */}
        <div className="bg-white border rounded-sm w-full">
          <div className="bg-gray-100 p-4 border-b">
            <h1 className="font-semibold">Inputs</h1>
            <h3 className="text-muted-foreground text-sm">
              Inputs used for this phase
            </h3>
          </div>

          <div className="space-y-4 p-4">
            <div className="grid grid-cols-4">
              <h1 className="text-nowrap">Target URL</h1>
              <Input placeholder="url" className="col-span-3" />
            </div>

            <div className="grid grid-cols-4">
              <h1 className="text-nowrap">Body</h1>
              <Input placeholder="url" className="col-span-3" />
            </div>
          </div>
        </div>

        {/* Outputs */}
        <div className="bg-white border rounded-sm w-full">
          <div className="bg-gray-100 p-4 border-b">
            <h1 className="font-semibold">Outputs</h1>
            <h3 className="text-muted-foreground text-sm">
              Outputs generated by this phase
            </h3>
          </div>

          <div className="space-y-4 p-4">
            {/* <div className="grid grid-cols-4">
              <h1 className="text-nowrap">Target URL</h1>
              <Input placeholder="url" className="col-span-3" />
            </div>

            <div className="grid grid-cols-4">
              <h1 className="text-nowrap">Body</h1>
              <Input placeholder="url" className="col-span-3" />
            </div> */}
            <h1>No Parameters generated by this phase</h1>
          </div>
        </div>

        {/* Logs */}
        <div className="bg-white border rounded-sm w-full">
          <div className="bg-gray-100 p-4 border-b">
            <h1 className="font-semibold">Logs</h1>
            <h3 className="text-muted-foreground text-sm">
              Logs generated by this phase
            </h3>
          </div>

          <div className="space-y-4">
            <table className="min-w-full border-collapse table-auto">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-2 border-b font-light text-left">
                    Time
                  </th>
                  <th className="px-4 py-2 border-b font-light text-left">
                    Level
                  </th>
                  <th className="px-4 py-2 border-b font-light text-left">
                    Message
                  </th>
                </tr>
              </thead>
              <tbody>
                <tr className="px-4 py-2 text-xs">
                  <td className="px-4 py-2 text-nowrap">
                    {new Date().toISOString()}
                  </td>
                  <td className="px-4 py-2">{"INFO"}</td>
                  <td className="px-4 py-2">
                    {JSON.stringify(phaseDetails.data, null, 2)}
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
}
