import { ClockIcon, CoinsIcon } from "lucide-react";

import type { IExecutionLog, ILogLevel } from "@packages/workflow/types/log.ts";

import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import type { IWorkflowExecution } from "@packages/workflow/types/workflow.js";
import { DatesToDurationString } from "@/lib/helpers/date";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { cn } from "@/lib/utils";

interface PhaseDetailsProps {
  phaseDetails: IWorkflowExecution;
}

export default function PhaseDetails({ phaseDetails }: PhaseDetailsProps) {
  return (
    <div className="flex-1 space-y-4 p-4 px-8">
      <div className="flex items-center gap-4">
        <Badge variant={"outline"} className="space-x-2 bg-background">
          <div className="flex items-center gap-1">
            <CoinsIcon size={14} className="stroke-muted-foreground" />
            <span>Credits</span>
          </div>
          <span>{phaseDetails.creditsConsumed}</span>
        </Badge>

        <Badge variant={"outline"} className="space-x-2 bg-background">
          <div className="flex items-center gap-1">
            <ClockIcon size={14} className="stroke-muted-foreground" />
            <span>Duration</span>
          </div>
          <span>
            {DatesToDurationString(
              phaseDetails.completedAt,
              phaseDetails.startedAt,
            ) || "-"}
          </span>
        </Badge>
      </div>

      {/* Inputs */}
      <ParameterViewer
        title="Inputs"
        subTitle="Inputs used in this phase"
        paramJson={phaseDetails.inputs}
      />

      {/* Outputs */}
      <ParameterViewer
        title="Outputs"
        subTitle="Outputs used in this phase"
        paramJson={phaseDetails.outputs}
      />

      {/* Logs */}
      <LogViewer logs={phaseDetails.logs || []} />
    </div>
  );
}

function ParameterViewer({
  title,
  subTitle,
  paramJson,
}: {
  title: string;
  subTitle: string;
  paramJson: string | null;
}) {
  const params = paramJson ? JSON.parse(paramJson) : undefined;

  return (
    <Card className="gap-0 py-0 rounded-md overflow-hidden">
      <CardHeader className="bg-gray-200 dark:bg-sidebar py-4 rounded-md rounded-b-none">
        <CardTitle className="text-base">{title}</CardTitle>
        <CardDescription className="text-muted-foreground text-sm">
          {subTitle}{" "}
        </CardDescription>
      </CardHeader>

      <CardContent className="py-4">
        <div className="flex flex-col gap-2">
          {(!params || Object.keys(params).length === 0) && (
            <p className="text-sm">No Parameters generated by this phase</p>
          )}

          {params &&
            Object.entries(params).map(([key, value]) => (
              <div key={key} className="place-items-baseline grid grid-cols-3">
                <p className="col-span-1 w-fit text-muted-foreground text-sm">
                  {key}
                </p>

                <Input
                  readOnly
                  className="col-span-2"
                  value={String(value as string)}
                />
              </div>
            ))}
        </div>
      </CardContent>
    </Card>
  );
}

function LogViewer({ logs }: { logs: IExecutionLog[] }) {
  if (!logs || logs.length === 0) return null;

  return (
    <Card className="gap-0 py-0 rounded-md overflow-hidden">
      <CardHeader className="bg-gray-200 dark:bg-sidebar py-4 rounded-md rounded-b-none">
        <CardTitle className="text-base">Logs</CardTitle>
        <CardDescription className="text-muted-foreground text-sm">
          Logs generated by this phase
        </CardDescription>
      </CardHeader>

      <CardContent className="p-0">
        <Table>
          <TableHeader className="text-muted-foreground text-sm">
            <TableRow>
              <TableHead>Time</TableHead>
              <TableHead>Level</TableHead>
              <TableHead>Message</TableHead>
            </TableRow>
          </TableHeader>

          <TableBody>
            {logs.map((log) => (
              <TableRow key={log.id} className="text-muted-foreground">
                <TableCell
                  width={180}
                  className="p-0.5 pl-4 text-muted-foreground text-xs"
                >
                  {new Date(log.timestamp).toISOString()}
                </TableCell>
                <TableCell
                  width={80}
                  className={cn(
                    "p-[3px] pl-4 text-xs uppercase",

                    (log.logLevel as ILogLevel) === "error" &&
                      "text-destructive",
                    (log.logLevel as ILogLevel) === "info" && "text-primary",
                  )}
                >
                  {log.logLevel}
                </TableCell>
                <TableCell className="flex-1 p-[3px] pl-4 text-sm">
                  {log.message}
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
}
