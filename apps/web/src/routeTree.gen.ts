/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './pages/__root'
import { Route as AuthLayoutRouteImport } from './pages/auth/layout'
import { Route as WwwLayoutRouteImport } from './pages/_www/layout'
import { Route as ProtectedLayoutRouteImport } from './pages/_protected/layout'
import { Route as WwwIndexRouteImport } from './pages/_www/index'
import { Route as AuthRegisterRouteImport } from './pages/auth/register'
import { Route as AuthLoginRouteImport } from './pages/auth/login'
import { Route as ProtectedCIndexRouteImport } from './pages/_protected/c/index'
import { Route as ProtectedUserIndexRouteImport } from './pages/_protected/$user/index'
import { Route as ProtectedCChatIdRouteImport } from './pages/_protected/c/$chatId'

const AuthLayoutRoute = AuthLayoutRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const WwwLayoutRoute = WwwLayoutRouteImport.update({
  id: '/_www',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedLayoutRoute = ProtectedLayoutRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const WwwIndexRoute = WwwIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WwwLayoutRoute,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const ProtectedCIndexRoute = ProtectedCIndexRouteImport.update({
  id: '/c/',
  path: '/c/',
  getParentRoute: () => ProtectedLayoutRoute,
} as any)
const ProtectedUserIndexRoute = ProtectedUserIndexRouteImport.update({
  id: '/$user/',
  path: '/$user/',
  getParentRoute: () => ProtectedLayoutRoute,
} as any)
const ProtectedCChatIdRoute = ProtectedCChatIdRouteImport.update({
  id: '/c/$chatId',
  path: '/c/$chatId',
  getParentRoute: () => ProtectedLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/auth': typeof AuthLayoutRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/': typeof WwwIndexRoute
  '/c/$chatId': typeof ProtectedCChatIdRoute
  '/$user': typeof ProtectedUserIndexRoute
  '/c': typeof ProtectedCIndexRoute
}
export interface FileRoutesByTo {
  '/auth': typeof AuthLayoutRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/': typeof WwwIndexRoute
  '/c/$chatId': typeof ProtectedCChatIdRoute
  '/$user': typeof ProtectedUserIndexRoute
  '/c': typeof ProtectedCIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_protected': typeof ProtectedLayoutRouteWithChildren
  '/_www': typeof WwwLayoutRouteWithChildren
  '/auth': typeof AuthLayoutRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/_www/': typeof WwwIndexRoute
  '/_protected/c/$chatId': typeof ProtectedCChatIdRoute
  '/_protected/$user/': typeof ProtectedUserIndexRoute
  '/_protected/c/': typeof ProtectedCIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/auth'
    | '/auth/login'
    | '/auth/register'
    | '/'
    | '/c/$chatId'
    | '/$user'
    | '/c'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth'
    | '/auth/login'
    | '/auth/register'
    | '/'
    | '/c/$chatId'
    | '/$user'
    | '/c'
  id:
    | '__root__'
    | '/_protected'
    | '/_www'
    | '/auth'
    | '/auth/login'
    | '/auth/register'
    | '/_www/'
    | '/_protected/c/$chatId'
    | '/_protected/$user/'
    | '/_protected/c/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ProtectedLayoutRoute: typeof ProtectedLayoutRouteWithChildren
  WwwLayoutRoute: typeof WwwLayoutRouteWithChildren
  AuthLayoutRoute: typeof AuthLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_www': {
      id: '/_www'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof WwwLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_www/': {
      id: '/_www/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof WwwIndexRouteImport
      parentRoute: typeof WwwLayoutRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/_protected/c/': {
      id: '/_protected/c/'
      path: '/c'
      fullPath: '/c'
      preLoaderRoute: typeof ProtectedCIndexRouteImport
      parentRoute: typeof ProtectedLayoutRoute
    }
    '/_protected/$user/': {
      id: '/_protected/$user/'
      path: '/$user'
      fullPath: '/$user'
      preLoaderRoute: typeof ProtectedUserIndexRouteImport
      parentRoute: typeof ProtectedLayoutRoute
    }
    '/_protected/c/$chatId': {
      id: '/_protected/c/$chatId'
      path: '/c/$chatId'
      fullPath: '/c/$chatId'
      preLoaderRoute: typeof ProtectedCChatIdRouteImport
      parentRoute: typeof ProtectedLayoutRoute
    }
  }
}

interface ProtectedLayoutRouteChildren {
  ProtectedCChatIdRoute: typeof ProtectedCChatIdRoute
  ProtectedUserIndexRoute: typeof ProtectedUserIndexRoute
  ProtectedCIndexRoute: typeof ProtectedCIndexRoute
}

const ProtectedLayoutRouteChildren: ProtectedLayoutRouteChildren = {
  ProtectedCChatIdRoute: ProtectedCChatIdRoute,
  ProtectedUserIndexRoute: ProtectedUserIndexRoute,
  ProtectedCIndexRoute: ProtectedCIndexRoute,
}

const ProtectedLayoutRouteWithChildren = ProtectedLayoutRoute._addFileChildren(
  ProtectedLayoutRouteChildren,
)

interface WwwLayoutRouteChildren {
  WwwIndexRoute: typeof WwwIndexRoute
}

const WwwLayoutRouteChildren: WwwLayoutRouteChildren = {
  WwwIndexRoute: WwwIndexRoute,
}

const WwwLayoutRouteWithChildren = WwwLayoutRoute._addFileChildren(
  WwwLayoutRouteChildren,
)

interface AuthLayoutRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthLayoutRouteChildren: AuthLayoutRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthLayoutRouteWithChildren = AuthLayoutRoute._addFileChildren(
  AuthLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  ProtectedLayoutRoute: ProtectedLayoutRouteWithChildren,
  WwwLayoutRoute: WwwLayoutRouteWithChildren,
  AuthLayoutRoute: AuthLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
