/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './pages/__root'
import { Route as AuthRouteImport } from './pages/auth'
import { Route as WwwRouteImport } from './pages/_www'
import { Route as ProtectedRouteImport } from './pages/_protected'
import { Route as WwwIndexRouteImport } from './pages/_www/index'
import { Route as AuthRegisterRouteImport } from './pages/auth/register'
import { Route as AuthLoginRouteImport } from './pages/auth/login'
import { Route as ProtectedProjectIdLayoutRouteImport } from './pages/_protected/$projectId/layout'
import { Route as ProtectedDashboardIndexRouteImport } from './pages/_protected/dashboard/index'
import { Route as ProtectedProjectIdIndexRouteImport } from './pages/_protected/$projectId/index'

const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const WwwRoute = WwwRouteImport.update({
  id: '/_www',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const WwwIndexRoute = WwwIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WwwRoute,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)
const ProtectedProjectIdLayoutRoute =
  ProtectedProjectIdLayoutRouteImport.update({
    id: '/$projectId',
    path: '/$projectId',
    getParentRoute: () => ProtectedRoute,
  } as any)
const ProtectedDashboardIndexRoute = ProtectedDashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedProjectIdIndexRoute = ProtectedProjectIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedProjectIdLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/auth': typeof AuthRouteWithChildren
  '/$projectId': typeof ProtectedProjectIdLayoutRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/': typeof WwwIndexRoute
  '/$projectId/': typeof ProtectedProjectIdIndexRoute
  '/dashboard': typeof ProtectedDashboardIndexRoute
}
export interface FileRoutesByTo {
  '/auth': typeof AuthRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/': typeof WwwIndexRoute
  '/$projectId': typeof ProtectedProjectIdIndexRoute
  '/dashboard': typeof ProtectedDashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_protected': typeof ProtectedRouteWithChildren
  '/_www': typeof WwwRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/_protected/$projectId': typeof ProtectedProjectIdLayoutRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/_www/': typeof WwwIndexRoute
  '/_protected/$projectId/': typeof ProtectedProjectIdIndexRoute
  '/_protected/dashboard/': typeof ProtectedDashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/auth'
    | '/$projectId'
    | '/auth/login'
    | '/auth/register'
    | '/'
    | '/$projectId/'
    | '/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth'
    | '/auth/login'
    | '/auth/register'
    | '/'
    | '/$projectId'
    | '/dashboard'
  id:
    | '__root__'
    | '/_protected'
    | '/_www'
    | '/auth'
    | '/_protected/$projectId'
    | '/auth/login'
    | '/auth/register'
    | '/_www/'
    | '/_protected/$projectId/'
    | '/_protected/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
  WwwRoute: typeof WwwRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_www': {
      id: '/_www'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof WwwRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_www/': {
      id: '/_www/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof WwwIndexRouteImport
      parentRoute: typeof WwwRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof AuthRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_protected/$projectId': {
      id: '/_protected/$projectId'
      path: '/$projectId'
      fullPath: '/$projectId'
      preLoaderRoute: typeof ProtectedProjectIdLayoutRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/dashboard/': {
      id: '/_protected/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/$projectId/': {
      id: '/_protected/$projectId/'
      path: '/'
      fullPath: '/$projectId/'
      preLoaderRoute: typeof ProtectedProjectIdIndexRouteImport
      parentRoute: typeof ProtectedProjectIdLayoutRoute
    }
  }
}

interface ProtectedProjectIdLayoutRouteChildren {
  ProtectedProjectIdIndexRoute: typeof ProtectedProjectIdIndexRoute
}

const ProtectedProjectIdLayoutRouteChildren: ProtectedProjectIdLayoutRouteChildren =
  {
    ProtectedProjectIdIndexRoute: ProtectedProjectIdIndexRoute,
  }

const ProtectedProjectIdLayoutRouteWithChildren =
  ProtectedProjectIdLayoutRoute._addFileChildren(
    ProtectedProjectIdLayoutRouteChildren,
  )

interface ProtectedRouteChildren {
  ProtectedProjectIdLayoutRoute: typeof ProtectedProjectIdLayoutRouteWithChildren
  ProtectedDashboardIndexRoute: typeof ProtectedDashboardIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedProjectIdLayoutRoute: ProtectedProjectIdLayoutRouteWithChildren,
  ProtectedDashboardIndexRoute: ProtectedDashboardIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

interface WwwRouteChildren {
  WwwIndexRoute: typeof WwwIndexRoute
}

const WwwRouteChildren: WwwRouteChildren = {
  WwwIndexRoute: WwwIndexRoute,
}

const WwwRouteWithChildren = WwwRoute._addFileChildren(WwwRouteChildren)

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  WwwRoute: WwwRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
