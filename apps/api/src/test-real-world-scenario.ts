#!/usr/bin/env bun

// Test Real-World Scenario: Company Research + Document Analysis
import { SemanticToolRegistry } from "./lib/semantic-tool-registry";
import { toolset } from "./tool/tool.index";

async function testRealWorldScenario() {
  console.log("🌍 Testing Real-World Scenario: Company Research + Document Analysis\n");
  
  const registry = new SemanticToolRegistry(toolset);
  
  // Wait for initialization
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  console.log("📊 Initial Learning Stats:");
  console.log(registry.getLearningStats());
  console.log("\n" + "=".repeat(70) + "\n");
  
  // Test 1: Company research query (should use search)
  console.log("🧪 TEST 1: Company Research Query");
  const companyQuery = "tell me about the company who developed and maintain DITEC";
  console.log(`\n--- Query: "${companyQuery}" ---`);
  const result1 = await registry.selectToolsSemantically(companyQuery, undefined, 3);
  console.log(`Method: ${result1.selectionMethod}`);
  console.log(`Tokens Used: ${result1.tokensUsed}`);
  console.log(`Processing Time: ${result1.processingTime}ms`);
  console.log(`Tools Selected: ${result1.tools.map(t => t.name).join(', ')}`);
  console.log(`Confidence Scores: ${result1.confidenceScores.map(s => `${(s * 100).toFixed(1)}%`).join(', ')}`);
  console.log(`Reasonings: ${result1.reasonings.join(' | ')}`);
  console.log(`🎯 Expected: Should use tavilySearch for company research`);
  
  console.log("\n" + "=".repeat(70) + "\n");
  
  // Test 2: Document analysis with @ mention
  console.log("🧪 TEST 2: Document Analysis with @ Mention");
  const docQuery = "@6701cc5f-d92c-4043-9bde-88050185c1c2 here tell me about the company who developed and maintain DITEC";
  console.log(`\n--- Query: "${docQuery}" ---`);
  const result2 = await registry.selectToolsSemantically(docQuery, undefined, 3);
  console.log(`Method: ${result2.selectionMethod}`);
  console.log(`Tokens Used: ${result2.tokensUsed}`);
  console.log(`Processing Time: ${result2.processingTime}ms`);
  console.log(`Tools Selected: ${result2.tools.map(t => t.name).join(', ')}`);
  console.log(`Confidence Scores: ${result2.confidenceScores.map(s => `${(s * 100).toFixed(1)}%`).join(', ')}`);
  console.log(`Reasonings: ${result2.reasonings.join(' | ')}`);
  console.log(`🎯 Expected: Should use retrieveRelevantChunks + tavilySearch`);
  
  console.log("\n" + "=".repeat(70) + "\n");
  
  // Test 3: Complex document analysis
  console.log("🧪 TEST 3: Complex Document Analysis");
  const complexDocQuery = "@6701cc5f-d92c-4043-9bde-88050185c1c2 analyze this document about DITEC authentication system and find current information about the company";
  console.log(`\n--- Query: "${complexDocQuery}" ---`);
  const result3 = await registry.selectToolsSemantically(complexDocQuery, undefined, 3);
  console.log(`Method: ${result3.selectionMethod}`);
  console.log(`Tokens Used: ${result3.tokensUsed}`);
  console.log(`Processing Time: ${result3.processingTime}ms`);
  console.log(`Tools Selected: ${result3.tools.map(t => t.name).join(', ')}`);
  console.log(`Confidence Scores: ${result3.confidenceScores.map(s => `${(s * 100).toFixed(1)}%`).join(', ')}`);
  console.log(`Reasonings: ${result3.reasonings.join(' | ')}`);
  console.log(`🎯 Expected: Should use retrieveRelevantChunks + tavilySearch for comprehensive analysis`);
  
  console.log("\n" + "=".repeat(70) + "\n");
  
  // Test 4: Error detection and correction
  console.log("🧪 TEST 4: Error Detection Query");
  const errorQuery = "this conversation is wrong generated by my ai @Nurospace/";
  console.log(`\n--- Query: "${errorQuery}" ---`);
  const result4 = await registry.selectToolsSemantically(errorQuery, undefined, 2);
  console.log(`Method: ${result4.selectionMethod}`);
  console.log(`Tokens Used: ${result4.tokensUsed}`);
  console.log(`Processing Time: ${result4.processingTime}ms`);
  console.log(`Tools Selected: ${result4.tools.map(t => t.name).join(', ')}`);
  console.log(`Confidence Scores: ${result4.confidenceScores.map(s => `${(s * 100).toFixed(1)}%`).join(', ')}`);
  console.log(`Reasonings: ${result4.reasonings.join(' | ')}`);
  console.log(`🎯 Expected: Should handle error detection appropriately`);
  
  console.log("\n" + "=".repeat(70) + "\n");
  
  // Test 5: Multi-tool orchestration for research
  console.log("🧪 TEST 5: Multi-Tool Research Orchestration");
  const researchQuery = "@6701cc5f-d92c-4043-9bde-88050185c1c2 what is DITEC, who developed it, and what are the latest developments";
  console.log(`\n--- Query: "${researchQuery}" ---`);
  const result5 = await registry.selectToolsSemantically(researchQuery, undefined, 3);
  console.log(`Method: ${result5.selectionMethod}`);
  console.log(`Tokens Used: ${result5.tokensUsed}`);
  console.log(`Processing Time: ${result5.processingTime}ms`);
  console.log(`Tools Selected: ${result5.tools.map(t => t.name).join(', ')}`);
  console.log(`Confidence Scores: ${result5.confidenceScores.map(s => `${(s * 100).toFixed(1)}%`).join(', ')}`);
  console.log(`Reasonings: ${result5.reasonings.join(' | ')}`);
  console.log(`🎯 Expected: Should orchestrate multiple tools for comprehensive research`);
  
  console.log("\n" + "=".repeat(70) + "\n");
  
  // Test 6: Final stats and analysis
  console.log("📈 FINAL REAL-WORLD SCENARIO STATS:");
  const finalStats = registry.getLearningStats();
  console.log(`Total Patterns Learned: ${finalStats.totalPatterns}`);
  console.log(`Keyword Success Rate: ${(finalStats.keywordSuccessRate * 100).toFixed(1)}%`);
  console.log(`Semantic Usage Rate: ${(finalStats.semanticUsageRate * 100).toFixed(1)}%`);
  console.log(`Average Usage Count: ${finalStats.averageUsageCount.toFixed(1)}`);
  
  console.log("\n🎉 REAL-WORLD SCENARIO TEST COMPLETED!");
  console.log("\n📊 ANALYSIS:");
  console.log("- Document @ mentions should trigger retrieveRelevantChunks");
  console.log("- Company research should trigger tavilySearch");
  console.log("- Complex queries should orchestrate multiple tools");
  console.log("- System should handle error detection gracefully");
  console.log("- Learning system adapts to real-world patterns");
}

// Run the test
testRealWorldScenario().catch(console.error);
